AWSTemplateFormatVersion: 2010-09-09

Parameters:
  LambdaS3Key:
    Type: String
  GithubUsername:
    Type: String
  GithubPassword:
    Type: String
  PrivateKey:
    Type: String
Resources:
  NewSongFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: new-song.handler
      Code:
        S3Bucket: !ImportValue DeploymentBucket
        S3Key: !Ref LambdaS3Key
      Layers:
        - arn:aws:lambda:eu-west-2:553035198032:layer:git-lambda2:8
      Timeout: 40
      Role: !GetAtt NewSongFunctionRole.Arn
      Runtime: nodejs20.x
      Environment:
        Variables:
          GITHUB_USERNAME: !Ref GithubUsername
          GITHUB_PASSWORD: !Ref GithubPassword
          PRIVATE_KEY: !Ref PrivateKey

  # Creates an HTTP API for our Lambda function.
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    DeletionPolicy: Retain
    Properties:
      Name: capoeira-songbook-contributor
      ProtocolType: HTTP
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt NewSongFunction.Arn
      PayloadFormatVersion: "2.0"
  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn: HttpApiIntegration
    Properties:
      RouteKey: POST /song
      ApiId: !Ref HttpApi
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiIntegration
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      ApiId: !Ref HttpApi
      AutoDeploy: true
      DefaultRouteSettings:
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 2

  # Allows the Lambda function to access CloudWatch
  NewSongFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AppendToLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Allows API Gateway to call our Lambda function.
  LambdaPermissionHttpApi:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NewSongFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref HttpApi
          - /*

# Outputs the URL to our Lambda HTTP API.
Outputs:
  ApiUrl:
    Description: URL of the HTTP API.
    Value: !Join
      - ""
      - - https://
        - !Ref HttpApi
        - .execute-api.
        - !Ref AWS::Region
        - .
        - !Ref AWS::URLSuffix

# TODO replicate in cloudformation and remove manual changes done in AWS for setting up cloudflare connection:
#   The tutorial followed is: https://carocci-eugenio.medium.com/connect-cloudflare-to-aws-api-gateway-18e961a6e24f
# Create(or reuse same) certificate generated in Cloudflare
# Import certificate generated inside cloudflare into AWS Certificate Manager
#   Certificate chain of cloudflare is in this page: https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/#cloudflare-origin-ca-root-certificate
#     The "Cloudflare Origin RSA PEM" Link
# Define a custom domain name in API Gateway for the clouflare domain
# Configure the API Mapping for the Custom Domain Name created
#   Just select the api and the stage for this, leaving the path as blank
# Find and copy the "API Gateway Domain Name" created for this Custom Domain Name
# In Cloudflare we need to use this value to set a CNAME pointing at API Gateway
# In cloudflare set the SSL to full (or even full strict) (it makes sure to use the certificate to endript traffic towards api gateway)
#   Already done in terraform